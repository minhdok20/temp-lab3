
Led_Animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee8  08002ee8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002ee8  08002ee8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ee8  08002ee8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000064  08002f54  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002f54  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d2c  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abf  00000000  00000000  00028db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a6e  00000000  00000000  0002bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3bf  00000000  00000000  000426ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082214  00000000  00000000  0004daad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfcc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  000cfd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e88 	.word	0x08002e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002e88 	.word	0x08002e88

0800014c <isButton1Pressed>:

int TimeOutForKeyPress1 = 200;
int TimeOutForKeyPress2 = 50;
int TimeOutForKeyPress3 = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000080 	.word	0x20000080

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000084 	.word	0x20000084

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000088 	.word	0x20000088

080001b8 <subKeyPocess1>:

void subKeyPocess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyPocess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000080 	.word	0x20000080

080001d0 <subKeyPocess2>:

void subKeyPocess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyPocess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000084 	.word	0x20000084

080001e8 <subKeyPocess3>:

void subKeyPocess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyPocess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088

08000200 <getKeyInput1>:

void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0Button1 = KeyReg1Button1;
 8000204:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <getKeyInput1+0x80>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <getKeyInput1+0x84>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1Button1 = KeyReg2Button1;
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <getKeyInput1+0x88>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <getKeyInput1+0x80>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2Button1 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000214:	2102      	movs	r1, #2
 8000216:	481d      	ldr	r0, [pc, #116]	; (800028c <getKeyInput1+0x8c>)
 8000218:	f001 fdf6 	bl	8001e08 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <getKeyInput1+0x88>)
 8000222:	601a      	str	r2, [r3, #0]
	if((KeyReg1Button1 == KeyReg0Button1) && (KeyReg1Button1 == KeyReg2Button1)){
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <getKeyInput1+0x80>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeyInput1+0x84>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d125      	bne.n	800027c <getKeyInput1+0x7c>
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <getKeyInput1+0x80>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <getKeyInput1+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d11f      	bne.n	800027c <getKeyInput1+0x7c>
		if(KeyReg2Button1 != KeyReg3Button1){
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <getKeyInput1+0x88>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <getKeyInput1+0x90>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00d      	beq.n	8000264 <getKeyInput1+0x64>
			KeyReg3Button1 = KeyReg2Button1;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <getKeyInput1+0x88>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <getKeyInput1+0x90>)
 800024e:	6013      	str	r3, [r2, #0]
			if(KeyReg2Button1 == PRESSED_STATE){
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <getKeyInput1+0x88>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d111      	bne.n	800027c <getKeyInput1+0x7c>
				TimeOutForKeyPress1 = 200;
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <getKeyInput1+0x94>)
 800025a:	22c8      	movs	r2, #200	; 0xc8
 800025c:	601a      	str	r2, [r3, #0]
				subKeyPocess1();
 800025e:	f7ff ffab 	bl	80001b8 <subKeyPocess1>
			if(TimeOutForKeyPress1 == 0){
				KeyReg3Button1 = NORMAL_STATE;
			}
		}
	}
}
 8000262:	e00b      	b.n	800027c <getKeyInput1+0x7c>
			TimeOutForKeyPress1--;
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <getKeyInput1+0x94>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3b01      	subs	r3, #1
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <getKeyInput1+0x94>)
 800026c:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress1 == 0){
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <getKeyInput1+0x94>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d102      	bne.n	800027c <getKeyInput1+0x7c>
				KeyReg3Button1 = NORMAL_STATE;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <getKeyInput1+0x90>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000004 	.word	0x20000004
 8000284:	20000000 	.word	0x20000000
 8000288:	20000008 	.word	0x20000008
 800028c:	40010800 	.word	0x40010800
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000030 	.word	0x20000030

08000298 <getKeyInput2>:

void getKeyInput2(){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	KeyReg0Button2 = KeyReg1Button2;
 800029c:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <getKeyInput2+0x80>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <getKeyInput2+0x84>)
 80002a2:	6013      	str	r3, [r2, #0]
	KeyReg1Button2 = KeyReg2Button2;
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <getKeyInput2+0x88>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <getKeyInput2+0x80>)
 80002aa:	6013      	str	r3, [r2, #0]
	KeyReg2Button2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 80002ac:	2104      	movs	r1, #4
 80002ae:	481d      	ldr	r0, [pc, #116]	; (8000324 <getKeyInput2+0x8c>)
 80002b0:	f001 fdaa 	bl	8001e08 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <getKeyInput2+0x88>)
 80002ba:	601a      	str	r2, [r3, #0]
	if((KeyReg1Button2 == KeyReg0Button2) && (KeyReg1Button2 == KeyReg2Button2)){
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <getKeyInput2+0x80>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <getKeyInput2+0x84>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d125      	bne.n	8000314 <getKeyInput2+0x7c>
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <getKeyInput2+0x80>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput2+0x88>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d11f      	bne.n	8000314 <getKeyInput2+0x7c>
		if(KeyReg2Button2 != KeyReg3Button2){
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <getKeyInput2+0x88>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <getKeyInput2+0x90>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d00d      	beq.n	80002fc <getKeyInput2+0x64>
			KeyReg3Button2 = KeyReg2Button2;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <getKeyInput2+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a10      	ldr	r2, [pc, #64]	; (8000328 <getKeyInput2+0x90>)
 80002e6:	6013      	str	r3, [r2, #0]
			if(KeyReg2Button2 == PRESSED_STATE){
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <getKeyInput2+0x88>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d111      	bne.n	8000314 <getKeyInput2+0x7c>
				TimeOutForKeyPress2 = 10;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <getKeyInput2+0x94>)
 80002f2:	220a      	movs	r2, #10
 80002f4:	601a      	str	r2, [r3, #0]
				subKeyPocess2();
 80002f6:	f7ff ff6b 	bl	80001d0 <subKeyPocess2>
			if(TimeOutForKeyPress2 == 0){
				KeyReg3Button2 = NORMAL_STATE;
			}
		}
	}
}
 80002fa:	e00b      	b.n	8000314 <getKeyInput2+0x7c>
			TimeOutForKeyPress2--;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <getKeyInput2+0x94>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <getKeyInput2+0x94>)
 8000304:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress2 == 0){
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <getKeyInput2+0x94>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <getKeyInput2+0x7c>
				KeyReg3Button2 = NORMAL_STATE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <getKeyInput2+0x90>)
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000014 	.word	0x20000014
 800031c:	20000010 	.word	0x20000010
 8000320:	20000018 	.word	0x20000018
 8000324:	40010800 	.word	0x40010800
 8000328:	2000001c 	.word	0x2000001c
 800032c:	20000034 	.word	0x20000034

08000330 <getKeyInput3>:

void getKeyInput3(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	KeyReg0Button3 = KeyReg1Button3;
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <getKeyInput3+0x80>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <getKeyInput3+0x84>)
 800033a:	6013      	str	r3, [r2, #0]
	KeyReg1Button3 = KeyReg2Button3;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <getKeyInput3+0x88>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <getKeyInput3+0x80>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg2Button3 = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000344:	2108      	movs	r1, #8
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <getKeyInput3+0x8c>)
 8000348:	f001 fd5e 	bl	8001e08 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <getKeyInput3+0x88>)
 8000352:	601a      	str	r2, [r3, #0]
	if((KeyReg1Button3 == KeyReg0Button3) && (KeyReg1Button3 == KeyReg2Button3)){
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <getKeyInput3+0x80>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <getKeyInput3+0x84>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d125      	bne.n	80003ac <getKeyInput3+0x7c>
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <getKeyInput3+0x80>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <getKeyInput3+0x88>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	429a      	cmp	r2, r3
 800036a:	d11f      	bne.n	80003ac <getKeyInput3+0x7c>
		if(KeyReg2Button3 != KeyReg3Button3){
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <getKeyInput3+0x88>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <getKeyInput3+0x90>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d00d      	beq.n	8000394 <getKeyInput3+0x64>
			KeyReg3Button3 = KeyReg2Button3;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <getKeyInput3+0x88>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <getKeyInput3+0x90>)
 800037e:	6013      	str	r3, [r2, #0]
			if(KeyReg2Button3 == PRESSED_STATE){
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <getKeyInput3+0x88>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d111      	bne.n	80003ac <getKeyInput3+0x7c>
				TimeOutForKeyPress3 = 200;
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput3+0x94>)
 800038a:	22c8      	movs	r2, #200	; 0xc8
 800038c:	601a      	str	r2, [r3, #0]
				subKeyPocess3();
 800038e:	f7ff ff2b 	bl	80001e8 <subKeyPocess3>
			if(TimeOutForKeyPress3 == 0){
				KeyReg3Button3 = NORMAL_STATE;
			}
		}
	}
}
 8000392:	e00b      	b.n	80003ac <getKeyInput3+0x7c>
			TimeOutForKeyPress3--;
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <getKeyInput3+0x94>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3b01      	subs	r3, #1
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <getKeyInput3+0x94>)
 800039c:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress3 == 0){
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <getKeyInput3+0x94>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d102      	bne.n	80003ac <getKeyInput3+0x7c>
				KeyReg3Button3 = NORMAL_STATE;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <getKeyInput3+0x90>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000020 	.word	0x20000020
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40010800 	.word	0x40010800
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	20000038 	.word	0x20000038

080003c8 <fsm_automatic_run>:

#include "fsm_automatic.h"

int status;

void fsm_automatic_run(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 80003cc:	4bbc      	ldr	r3, [pc, #752]	; (80006c0 <fsm_automatic_run+0x2f8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d105      	bne.n	80003e0 <fsm_automatic_run+0x18>
		updateClockBuffer();
 80003d4:	f000 fdd8 	bl	8000f88 <updateClockBuffer>
		setTimer4(1000);
 80003d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003dc:	f001 f8ae 	bl	800153c <setTimer4>
	}

	if(timer3_flag == 1){
 80003e0:	4bb8      	ldr	r3, [pc, #736]	; (80006c4 <fsm_automatic_run+0x2fc>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d107      	bne.n	80003f8 <fsm_automatic_run+0x30>
		update7SEG(index_led);
 80003e8:	4bb7      	ldr	r3, [pc, #732]	; (80006c8 <fsm_automatic_run+0x300>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fd1f 	bl	8000e30 <update7SEG>
		setTimer3(125);
 80003f2:	207d      	movs	r0, #125	; 0x7d
 80003f4:	f001 f876 	bl	80014e4 <setTimer3>
	}
	switch(status){
 80003f8:	4bb4      	ldr	r3, [pc, #720]	; (80006cc <fsm_automatic_run+0x304>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	2b04      	cmp	r3, #4
 8000400:	f200 8152 	bhi.w	80006a8 <fsm_automatic_run+0x2e0>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <fsm_automatic_run+0x44>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000421 	.word	0x08000421
 8000410:	0800047d 	.word	0x0800047d
 8000414:	08000509 	.word	0x08000509
 8000418:	08000595 	.word	0x08000595
 800041c:	0800061f 	.word	0x0800061f
	case MODE1:
		//clearTimer5();
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	48aa      	ldr	r0, [pc, #680]	; (80006d0 <fsm_automatic_run+0x308>)
 8000426:	f001 fd06 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	2140      	movs	r1, #64	; 0x40
 800042e:	48a8      	ldr	r0, [pc, #672]	; (80006d0 <fsm_automatic_run+0x308>)
 8000430:	f001 fd01 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	48a5      	ldr	r0, [pc, #660]	; (80006d0 <fsm_automatic_run+0x308>)
 800043a:	f001 fcfc 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000444:	48a2      	ldr	r0, [pc, #648]	; (80006d0 <fsm_automatic_run+0x308>)
 8000446:	f001 fcf6 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000450:	489f      	ldr	r0, [pc, #636]	; (80006d0 <fsm_automatic_run+0x308>)
 8000452:	f001 fcf0 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	489c      	ldr	r0, [pc, #624]	; (80006d0 <fsm_automatic_run+0x308>)
 800045e:	f001 fcea 	bl	8001e36 <HAL_GPIO_WritePin>

		status = AUTO_RED1_GREEN2;
 8000462:	4b9a      	ldr	r3, [pc, #616]	; (80006cc <fsm_automatic_run+0x304>)
 8000464:	2202      	movs	r2, #2
 8000466:	601a      	str	r2, [r3, #0]
		setTimer2(GreenCounter*1000);
 8000468:	4b9a      	ldr	r3, [pc, #616]	; (80006d4 <fsm_automatic_run+0x30c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000470:	fb02 f303 	mul.w	r3, r2, r3
 8000474:	4618      	mov	r0, r3
 8000476:	f001 f809 	bl	800148c <setTimer2>
		break;
 800047a:	e11e      	b.n	80006ba <fsm_automatic_run+0x2f2>
	case AUTO_RED1_GREEN2:
		//clearTimer5();
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2120      	movs	r1, #32
 8000480:	4893      	ldr	r0, [pc, #588]	; (80006d0 <fsm_automatic_run+0x308>)
 8000482:	f001 fcd8 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	4891      	ldr	r0, [pc, #580]	; (80006d0 <fsm_automatic_run+0x308>)
 800048c:	f001 fcd3 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	488e      	ldr	r0, [pc, #568]	; (80006d0 <fsm_automatic_run+0x308>)
 8000496:	f001 fcce 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	488b      	ldr	r0, [pc, #556]	; (80006d0 <fsm_automatic_run+0x308>)
 80004a2:	f001 fcc8 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4888      	ldr	r0, [pc, #544]	; (80006d0 <fsm_automatic_run+0x308>)
 80004ae:	f001 fcc2 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b8:	4885      	ldr	r0, [pc, #532]	; (80006d0 <fsm_automatic_run+0x308>)
 80004ba:	f001 fcbc 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 80004be:	4b86      	ldr	r3, [pc, #536]	; (80006d8 <fsm_automatic_run+0x310>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10b      	bne.n	80004de <fsm_automatic_run+0x116>
			status = AUTO_RED1_YELLOW2;
 80004c6:	4b81      	ldr	r3, [pc, #516]	; (80006cc <fsm_automatic_run+0x304>)
 80004c8:	2203      	movs	r2, #3
 80004ca:	601a      	str	r2, [r3, #0]
			setTimer2(YellowCounter*1000);
 80004cc:	4b83      	ldr	r3, [pc, #524]	; (80006dc <fsm_automatic_run+0x314>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 ffd7 	bl	800148c <setTimer2>
		}

		if(isButton1Pressed() == 1){
 80004de:	f7ff fe35 	bl	800014c <isButton1Pressed>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	f040 80e1 	bne.w	80006ac <fsm_automatic_run+0x2e4>
			status = MODE2;
 80004ea:	4b78      	ldr	r3, [pc, #480]	; (80006cc <fsm_automatic_run+0x304>)
 80004ec:	220a      	movs	r2, #10
 80004ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	4876      	ldr	r0, [pc, #472]	; (80006d0 <fsm_automatic_run+0x308>)
 80004f6:	f001 fc9e 	bl	8001e36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	4873      	ldr	r0, [pc, #460]	; (80006d0 <fsm_automatic_run+0x308>)
 8000502:	f001 fc98 	bl	8001e36 <HAL_GPIO_WritePin>
		}
		break;
 8000506:	e0d1      	b.n	80006ac <fsm_automatic_run+0x2e4>
	case AUTO_RED1_YELLOW2:
		//clearTimer5();
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4870      	ldr	r0, [pc, #448]	; (80006d0 <fsm_automatic_run+0x308>)
 800050e:	f001 fc92 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 8000512:	2201      	movs	r2, #1
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	486e      	ldr	r0, [pc, #440]	; (80006d0 <fsm_automatic_run+0x308>)
 8000518:	f001 fc8d 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	486b      	ldr	r0, [pc, #428]	; (80006d0 <fsm_automatic_run+0x308>)
 8000522:	f001 fc88 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052c:	4868      	ldr	r0, [pc, #416]	; (80006d0 <fsm_automatic_run+0x308>)
 800052e:	f001 fc82 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4865      	ldr	r0, [pc, #404]	; (80006d0 <fsm_automatic_run+0x308>)
 800053a:	f001 fc7c 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4862      	ldr	r0, [pc, #392]	; (80006d0 <fsm_automatic_run+0x308>)
 8000546:	f001 fc76 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 800054a:	4b63      	ldr	r3, [pc, #396]	; (80006d8 <fsm_automatic_run+0x310>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10b      	bne.n	800056a <fsm_automatic_run+0x1a2>
			status = AUTO_GREEN1_RED2;
 8000552:	4b5e      	ldr	r3, [pc, #376]	; (80006cc <fsm_automatic_run+0x304>)
 8000554:	2204      	movs	r2, #4
 8000556:	601a      	str	r2, [r3, #0]
			setTimer2(GreenCounter*1000);
 8000558:	4b5e      	ldr	r3, [pc, #376]	; (80006d4 <fsm_automatic_run+0x30c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff91 	bl	800148c <setTimer2>
		}

		if(isButton1Pressed() == 1){
 800056a:	f7ff fdef 	bl	800014c <isButton1Pressed>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	f040 809d 	bne.w	80006b0 <fsm_automatic_run+0x2e8>
			status = MODE2;
 8000576:	4b55      	ldr	r3, [pc, #340]	; (80006cc <fsm_automatic_run+0x304>)
 8000578:	220a      	movs	r2, #10
 800057a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2120      	movs	r1, #32
 8000580:	4853      	ldr	r0, [pc, #332]	; (80006d0 <fsm_automatic_run+0x308>)
 8000582:	f001 fc58 	bl	8001e36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4850      	ldr	r0, [pc, #320]	; (80006d0 <fsm_automatic_run+0x308>)
 800058e:	f001 fc52 	bl	8001e36 <HAL_GPIO_WritePin>
		}
		break;
 8000592:	e08d      	b.n	80006b0 <fsm_automatic_run+0x2e8>
	case AUTO_GREEN1_RED2:
		//clearTimer5();
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	484d      	ldr	r0, [pc, #308]	; (80006d0 <fsm_automatic_run+0x308>)
 800059a:	f001 fc4c 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	484b      	ldr	r0, [pc, #300]	; (80006d0 <fsm_automatic_run+0x308>)
 80005a4:	f001 fc47 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4848      	ldr	r0, [pc, #288]	; (80006d0 <fsm_automatic_run+0x308>)
 80005ae:	f001 fc42 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	4845      	ldr	r0, [pc, #276]	; (80006d0 <fsm_automatic_run+0x308>)
 80005ba:	f001 fc3c 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4842      	ldr	r0, [pc, #264]	; (80006d0 <fsm_automatic_run+0x308>)
 80005c6:	f001 fc36 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483f      	ldr	r0, [pc, #252]	; (80006d0 <fsm_automatic_run+0x308>)
 80005d2:	f001 fc30 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <fsm_automatic_run+0x310>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10b      	bne.n	80005f6 <fsm_automatic_run+0x22e>
			status = AUTO_YELLOW1_RED2;
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <fsm_automatic_run+0x304>)
 80005e0:	2205      	movs	r2, #5
 80005e2:	601a      	str	r2, [r3, #0]
			setTimer2(YellowCounter*1000);
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <fsm_automatic_run+0x314>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ec:	fb02 f303 	mul.w	r3, r2, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ff4b 	bl	800148c <setTimer2>
		}

		if(isButton1Pressed() == 1){
 80005f6:	f7ff fda9 	bl	800014c <isButton1Pressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d159      	bne.n	80006b4 <fsm_automatic_run+0x2ec>
			status = MODE2;
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <fsm_automatic_run+0x304>)
 8000602:	220a      	movs	r2, #10
 8000604:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	2120      	movs	r1, #32
 800060a:	4831      	ldr	r0, [pc, #196]	; (80006d0 <fsm_automatic_run+0x308>)
 800060c:	f001 fc13 	bl	8001e36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <fsm_automatic_run+0x308>)
 8000618:	f001 fc0d 	bl	8001e36 <HAL_GPIO_WritePin>
		}
		break;
 800061c:	e04a      	b.n	80006b4 <fsm_automatic_run+0x2ec>
	case AUTO_YELLOW1_RED2:
		//clearTimer5();
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	2120      	movs	r1, #32
 8000622:	482b      	ldr	r0, [pc, #172]	; (80006d0 <fsm_automatic_run+0x308>)
 8000624:	f001 fc07 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <fsm_automatic_run+0x308>)
 800062e:	f001 fc02 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <fsm_automatic_run+0x308>)
 8000638:	f001 fbfd 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <fsm_automatic_run+0x308>)
 8000644:	f001 fbf7 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064e:	4820      	ldr	r0, [pc, #128]	; (80006d0 <fsm_automatic_run+0x308>)
 8000650:	f001 fbf1 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	481d      	ldr	r0, [pc, #116]	; (80006d0 <fsm_automatic_run+0x308>)
 800065c:	f001 fbeb 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <fsm_automatic_run+0x310>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10b      	bne.n	8000680 <fsm_automatic_run+0x2b8>
			status = AUTO_RED1_GREEN2;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <fsm_automatic_run+0x304>)
 800066a:	2202      	movs	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
			setTimer2(GreenCounter*1000);
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <fsm_automatic_run+0x30c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ff06 	bl	800148c <setTimer2>
		}

		if(isButton1Pressed() == 1){
 8000680:	f7ff fd64 	bl	800014c <isButton1Pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d116      	bne.n	80006b8 <fsm_automatic_run+0x2f0>
			status = MODE2;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <fsm_automatic_run+0x304>)
 800068c:	220a      	movs	r2, #10
 800068e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2120      	movs	r1, #32
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <fsm_automatic_run+0x308>)
 8000696:	f001 fbce 	bl	8001e36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <fsm_automatic_run+0x308>)
 80006a2:	f001 fbc8 	bl	8001e36 <HAL_GPIO_WritePin>
		}
		break;
 80006a6:	e007      	b.n	80006b8 <fsm_automatic_run+0x2f0>
	default:
		break;
 80006a8:	bf00      	nop
 80006aa:	e006      	b.n	80006ba <fsm_automatic_run+0x2f2>
		break;
 80006ac:	bf00      	nop
 80006ae:	e004      	b.n	80006ba <fsm_automatic_run+0x2f2>
		break;
 80006b0:	bf00      	nop
 80006b2:	e002      	b.n	80006ba <fsm_automatic_run+0x2f2>
		break;
 80006b4:	bf00      	nop
 80006b6:	e000      	b.n	80006ba <fsm_automatic_run+0x2f2>
		break;
 80006b8:	bf00      	nop
	}
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000100 	.word	0x20000100
 80006c4:	200000f8 	.word	0x200000f8
 80006c8:	20000090 	.word	0x20000090
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	40010800 	.word	0x40010800
 80006d4:	20000044 	.word	0x20000044
 80006d8:	200000f0 	.word	0x200000f0
 80006dc:	20000040 	.word	0x20000040

080006e0 <fsm_manual_run>:

int RedCounter = 5;
int YellowCounter = 2;
int GreenCounter = 3;

void fsm_manual_run(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch(status){
 80006e4:	4b88      	ldr	r3, [pc, #544]	; (8000908 <fsm_manual_run+0x228>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3b0a      	subs	r3, #10
 80006ea:	2b15      	cmp	r3, #21
 80006ec:	f200 8311 	bhi.w	8000d12 <fsm_manual_run+0x632>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <fsm_manual_run+0x18>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	08000751 	.word	0x08000751
 80006fc:	08000827 	.word	0x08000827
 8000700:	08000d13 	.word	0x08000d13
 8000704:	08000d13 	.word	0x08000d13
 8000708:	08000d13 	.word	0x08000d13
 800070c:	08000d13 	.word	0x08000d13
 8000710:	08000d13 	.word	0x08000d13
 8000714:	08000d13 	.word	0x08000d13
 8000718:	08000d13 	.word	0x08000d13
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000931 	.word	0x08000931
 8000724:	08000a07 	.word	0x08000a07
 8000728:	08000d13 	.word	0x08000d13
 800072c:	08000d13 	.word	0x08000d13
 8000730:	08000d13 	.word	0x08000d13
 8000734:	08000d13 	.word	0x08000d13
 8000738:	08000d13 	.word	0x08000d13
 800073c:	08000d13 	.word	0x08000d13
 8000740:	08000d13 	.word	0x08000d13
 8000744:	08000d13 	.word	0x08000d13
 8000748:	08000ae7 	.word	0x08000ae7
 800074c:	08000c25 	.word	0x08000c25
	case MODE2:
		clearTimer2();
 8000750:	f000 feb8 	bl	80014c4 <clearTimer2>
		clearTimer3();
 8000754:	f000 fee2 	bl	800151c <clearTimer3>
		clearTimer4();
 8000758:	f000 ff0c 	bl	8001574 <clearTimer4>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	486a      	ldr	r0, [pc, #424]	; (800090c <fsm_manual_run+0x22c>)
 8000762:	f001 fb68 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	4868      	ldr	r0, [pc, #416]	; (800090c <fsm_manual_run+0x22c>)
 800076c:	f001 fb63 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000776:	4865      	ldr	r0, [pc, #404]	; (800090c <fsm_manual_run+0x22c>)
 8000778:	f001 fb5d 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4862      	ldr	r0, [pc, #392]	; (800090c <fsm_manual_run+0x22c>)
 8000784:	f001 fb57 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000788:	4b61      	ldr	r3, [pc, #388]	; (8000910 <fsm_manual_run+0x230>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10c      	bne.n	80007aa <fsm_manual_run+0xca>
			HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000790:	2120      	movs	r1, #32
 8000792:	485e      	ldr	r0, [pc, #376]	; (800090c <fsm_manual_run+0x22c>)
 8000794:	f001 fb67 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	485b      	ldr	r0, [pc, #364]	; (800090c <fsm_manual_run+0x22c>)
 800079e:	f001 fb62 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 fe55 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 80007aa:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <fsm_manual_run+0x234>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d126      	bne.n	8000800 <fsm_manual_run+0x120>
			led_buffer[0] = 0;
 80007b2:	4b59      	ldr	r3, [pc, #356]	; (8000918 <fsm_manual_run+0x238>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 2;
 80007b8:	4b57      	ldr	r3, [pc, #348]	; (8000918 <fsm_manual_run+0x238>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	605a      	str	r2, [r3, #4]
			led_buffer[2] = RedCounter/10;
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <fsm_manual_run+0x23c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a57      	ldr	r2, [pc, #348]	; (8000920 <fsm_manual_run+0x240>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	1092      	asrs	r2, r2, #2
 80007ca:	17db      	asrs	r3, r3, #31
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a52      	ldr	r2, [pc, #328]	; (8000918 <fsm_manual_run+0x238>)
 80007d0:	6093      	str	r3, [r2, #8]
			led_buffer[3] = RedCounter%10;
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <fsm_manual_run+0x23c>)
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4b52      	ldr	r3, [pc, #328]	; (8000920 <fsm_manual_run+0x240>)
 80007d8:	fb83 2301 	smull	r2, r3, r3, r1
 80007dc:	109a      	asrs	r2, r3, #2
 80007de:	17cb      	asrs	r3, r1, #31
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1aca      	subs	r2, r1, r3
 80007ec:	4b4a      	ldr	r3, [pc, #296]	; (8000918 <fsm_manual_run+0x238>)
 80007ee:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <fsm_manual_run+0x244>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fb1b 	bl	8000e30 <update7SEG>
			setTimer5(125);
 80007fa:	207d      	movs	r0, #125	; 0x7d
 80007fc:	f000 feca 	bl	8001594 <setTimer5>
		}

		if(isButton1Pressed() == 1){
 8000800:	f7ff fca4 	bl	800014c <isButton1Pressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d102      	bne.n	8000810 <fsm_manual_run+0x130>
			status = MODE3;
 800080a:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <fsm_manual_run+0x228>)
 800080c:	2214      	movs	r2, #20
 800080e:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1){
 8000810:	f7ff fcae 	bl	8000170 <isButton2Pressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d102      	bne.n	8000820 <fsm_manual_run+0x140>
			status = RED_INCREASE;
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <fsm_manual_run+0x228>)
 800081c:	220b      	movs	r2, #11
 800081e:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1){};
 8000820:	f7ff fcb8 	bl	8000194 <isButton3Pressed>
		break;
 8000824:	e27a      	b.n	8000d1c <fsm_manual_run+0x63c>
	case RED_INCREASE:
		clearTimer2();
 8000826:	f000 fe4d 	bl	80014c4 <clearTimer2>
		clearTimer3();
 800082a:	f000 fe77 	bl	800151c <clearTimer3>
		clearTimer4();
 800082e:	f000 fea1 	bl	8001574 <clearTimer4>
		if(timer1_flag == 1){
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <fsm_manual_run+0x230>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10c      	bne.n	8000854 <fsm_manual_run+0x174>
			HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	4833      	ldr	r0, [pc, #204]	; (800090c <fsm_manual_run+0x22c>)
 800083e:	f001 fb12 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	4831      	ldr	r0, [pc, #196]	; (800090c <fsm_manual_run+0x22c>)
 8000848:	f001 fb0d 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 800084c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000850:	f000 fe00 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <fsm_manual_run+0x234>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d126      	bne.n	80008aa <fsm_manual_run+0x1ca>
			led_buffer[0] = 0;
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <fsm_manual_run+0x238>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 2;
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <fsm_manual_run+0x238>)
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
			led_buffer[2] = RedCounter/10;
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <fsm_manual_run+0x23c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <fsm_manual_run+0x240>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1092      	asrs	r2, r2, #2
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	4a27      	ldr	r2, [pc, #156]	; (8000918 <fsm_manual_run+0x238>)
 800087a:	6093      	str	r3, [r2, #8]
			led_buffer[3] = RedCounter%10;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <fsm_manual_run+0x23c>)
 800087e:	6819      	ldr	r1, [r3, #0]
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <fsm_manual_run+0x240>)
 8000882:	fb83 2301 	smull	r2, r3, r3, r1
 8000886:	109a      	asrs	r2, r3, #2
 8000888:	17cb      	asrs	r3, r1, #31
 800088a:	1ad2      	subs	r2, r2, r3
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	1aca      	subs	r2, r1, r3
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <fsm_manual_run+0x238>)
 8000898:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <fsm_manual_run+0x244>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fac6 	bl	8000e30 <update7SEG>
			setTimer5(125);
 80008a4:	207d      	movs	r0, #125	; 0x7d
 80008a6:	f000 fe75 	bl	8001594 <setTimer5>
		}

		if(isButton2Pressed() == 1){
 80008aa:	f7ff fc61 	bl	8000170 <isButton2Pressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10c      	bne.n	80008ce <fsm_manual_run+0x1ee>
			if(RedCounter >= 99) {
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <fsm_manual_run+0x23c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b62      	cmp	r3, #98	; 0x62
 80008ba:	dd03      	ble.n	80008c4 <fsm_manual_run+0x1e4>
				RedCounter = 1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <fsm_manual_run+0x23c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e004      	b.n	80008ce <fsm_manual_run+0x1ee>
			}
			else
				RedCounter++;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <fsm_manual_run+0x23c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <fsm_manual_run+0x23c>)
 80008cc:	6013      	str	r3, [r2, #0]
		}

		if(isButton1Pressed() == 1){};
 80008ce:	f7ff fc3d 	bl	800014c <isButton1Pressed>

		if(RedCounter > YellowCounter){
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <fsm_manual_run+0x23c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <fsm_manual_run+0x248>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	dd10      	ble.n	8000900 <fsm_manual_run+0x220>
			if(isButton3Pressed() == 1){
 80008de:	f7ff fc59 	bl	8000194 <isButton3Pressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	f040 8216 	bne.w	8000d16 <fsm_manual_run+0x636>
				GreenCounter = RedCounter - YellowCounter;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <fsm_manual_run+0x23c>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <fsm_manual_run+0x248>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <fsm_manual_run+0x24c>)
 80008f6:	6013      	str	r3, [r2, #0]
				status = MODE2;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <fsm_manual_run+0x228>)
 80008fa:	220a      	movs	r2, #10
 80008fc:	601a      	str	r2, [r3, #0]
			}
		} else
			if(isButton3Pressed() == 1){};
		break;
 80008fe:	e20a      	b.n	8000d16 <fsm_manual_run+0x636>
			if(isButton3Pressed() == 1){};
 8000900:	f7ff fc48 	bl	8000194 <isButton3Pressed>
		break;
 8000904:	e207      	b.n	8000d16 <fsm_manual_run+0x636>
 8000906:	bf00      	nop
 8000908:	2000008c 	.word	0x2000008c
 800090c:	40010800 	.word	0x40010800
 8000910:	200000e8 	.word	0x200000e8
 8000914:	20000108 	.word	0x20000108
 8000918:	20000048 	.word	0x20000048
 800091c:	2000003c 	.word	0x2000003c
 8000920:	66666667 	.word	0x66666667
 8000924:	20000090 	.word	0x20000090
 8000928:	20000040 	.word	0x20000040
 800092c:	20000044 	.word	0x20000044
	case MODE3:
		clearTimer2();
 8000930:	f000 fdc8 	bl	80014c4 <clearTimer2>
		clearTimer3();
 8000934:	f000 fdf2 	bl	800151c <clearTimer3>
		clearTimer4();
 8000938:	f000 fe1c 	bl	8001574 <clearTimer4>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	2120      	movs	r1, #32
 8000940:	48a9      	ldr	r0, [pc, #676]	; (8000be8 <fsm_manual_run+0x508>)
 8000942:	f001 fa78 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	48a7      	ldr	r0, [pc, #668]	; (8000be8 <fsm_manual_run+0x508>)
 800094c:	f001 fa73 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	48a4      	ldr	r0, [pc, #656]	; (8000be8 <fsm_manual_run+0x508>)
 8000958:	f001 fa6d 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	48a1      	ldr	r0, [pc, #644]	; (8000be8 <fsm_manual_run+0x508>)
 8000964:	f001 fa67 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000968:	4ba0      	ldr	r3, [pc, #640]	; (8000bec <fsm_manual_run+0x50c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10c      	bne.n	800098a <fsm_manual_run+0x2aa>
			HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	489d      	ldr	r0, [pc, #628]	; (8000be8 <fsm_manual_run+0x508>)
 8000974:	f001 fa77 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	489a      	ldr	r0, [pc, #616]	; (8000be8 <fsm_manual_run+0x508>)
 800097e:	f001 fa72 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000986:	f000 fd65 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 800098a:	4b99      	ldr	r3, [pc, #612]	; (8000bf0 <fsm_manual_run+0x510>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d126      	bne.n	80009e0 <fsm_manual_run+0x300>
			led_buffer[0] = 0;
 8000992:	4b98      	ldr	r3, [pc, #608]	; (8000bf4 <fsm_manual_run+0x514>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 3;
 8000998:	4b96      	ldr	r3, [pc, #600]	; (8000bf4 <fsm_manual_run+0x514>)
 800099a:	2203      	movs	r2, #3
 800099c:	605a      	str	r2, [r3, #4]
			led_buffer[2] = YellowCounter/10;
 800099e:	4b96      	ldr	r3, [pc, #600]	; (8000bf8 <fsm_manual_run+0x518>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a96      	ldr	r2, [pc, #600]	; (8000bfc <fsm_manual_run+0x51c>)
 80009a4:	fb82 1203 	smull	r1, r2, r2, r3
 80009a8:	1092      	asrs	r2, r2, #2
 80009aa:	17db      	asrs	r3, r3, #31
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	4a91      	ldr	r2, [pc, #580]	; (8000bf4 <fsm_manual_run+0x514>)
 80009b0:	6093      	str	r3, [r2, #8]
			led_buffer[3] = YellowCounter%10;
 80009b2:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <fsm_manual_run+0x518>)
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	4b91      	ldr	r3, [pc, #580]	; (8000bfc <fsm_manual_run+0x51c>)
 80009b8:	fb83 2301 	smull	r2, r3, r3, r1
 80009bc:	109a      	asrs	r2, r3, #2
 80009be:	17cb      	asrs	r3, r1, #31
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1aca      	subs	r2, r1, r3
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <fsm_manual_run+0x514>)
 80009ce:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 80009d0:	4b8b      	ldr	r3, [pc, #556]	; (8000c00 <fsm_manual_run+0x520>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fa2b 	bl	8000e30 <update7SEG>
			setTimer5(125);
 80009da:	207d      	movs	r0, #125	; 0x7d
 80009dc:	f000 fdda 	bl	8001594 <setTimer5>
		}

		if(isButton1Pressed() == 1){
 80009e0:	f7ff fbb4 	bl	800014c <isButton1Pressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <fsm_manual_run+0x310>
			status = MODE4;
 80009ea:	4b86      	ldr	r3, [pc, #536]	; (8000c04 <fsm_manual_run+0x524>)
 80009ec:	221e      	movs	r2, #30
 80009ee:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1){
 80009f0:	f7ff fbbe 	bl	8000170 <isButton2Pressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <fsm_manual_run+0x320>
			status = YELLOW_INCREASE;
 80009fa:	4b82      	ldr	r3, [pc, #520]	; (8000c04 <fsm_manual_run+0x524>)
 80009fc:	2215      	movs	r2, #21
 80009fe:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1){};
 8000a00:	f7ff fbc8 	bl	8000194 <isButton3Pressed>
		break;
 8000a04:	e18a      	b.n	8000d1c <fsm_manual_run+0x63c>
	case YELLOW_INCREASE:
		clearTimer2();
 8000a06:	f000 fd5d 	bl	80014c4 <clearTimer2>
		clearTimer3();
 8000a0a:	f000 fd87 	bl	800151c <clearTimer3>
		clearTimer4();
 8000a0e:	f000 fdb1 	bl	8001574 <clearTimer4>
		if(timer1_flag == 1){
 8000a12:	4b76      	ldr	r3, [pc, #472]	; (8000bec <fsm_manual_run+0x50c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d10c      	bne.n	8000a34 <fsm_manual_run+0x354>
			HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4872      	ldr	r0, [pc, #456]	; (8000be8 <fsm_manual_run+0x508>)
 8000a1e:	f001 fa22 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 8000a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a26:	4870      	ldr	r0, [pc, #448]	; (8000be8 <fsm_manual_run+0x508>)
 8000a28:	f001 fa1d 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a30:	f000 fd10 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 8000a34:	4b6e      	ldr	r3, [pc, #440]	; (8000bf0 <fsm_manual_run+0x510>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d126      	bne.n	8000a8a <fsm_manual_run+0x3aa>
			led_buffer[0] = 0;
 8000a3c:	4b6d      	ldr	r3, [pc, #436]	; (8000bf4 <fsm_manual_run+0x514>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 3;
 8000a42:	4b6c      	ldr	r3, [pc, #432]	; (8000bf4 <fsm_manual_run+0x514>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	605a      	str	r2, [r3, #4]
			led_buffer[2] = YellowCounter/10;
 8000a48:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <fsm_manual_run+0x518>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a6b      	ldr	r2, [pc, #428]	; (8000bfc <fsm_manual_run+0x51c>)
 8000a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a52:	1092      	asrs	r2, r2, #2
 8000a54:	17db      	asrs	r3, r3, #31
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <fsm_manual_run+0x514>)
 8000a5a:	6093      	str	r3, [r2, #8]
			led_buffer[3] = YellowCounter%10;
 8000a5c:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <fsm_manual_run+0x518>)
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <fsm_manual_run+0x51c>)
 8000a62:	fb83 2301 	smull	r2, r3, r3, r1
 8000a66:	109a      	asrs	r2, r3, #2
 8000a68:	17cb      	asrs	r3, r1, #31
 8000a6a:	1ad2      	subs	r2, r2, r3
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	1aca      	subs	r2, r1, r3
 8000a76:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <fsm_manual_run+0x514>)
 8000a78:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 8000a7a:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <fsm_manual_run+0x520>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f9d6 	bl	8000e30 <update7SEG>
			setTimer5(125);
 8000a84:	207d      	movs	r0, #125	; 0x7d
 8000a86:	f000 fd85 	bl	8001594 <setTimer5>
		}

		if(isButton2Pressed() == 1){
 8000a8a:	f7ff fb71 	bl	8000170 <isButton2Pressed>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10c      	bne.n	8000aae <fsm_manual_run+0x3ce>
			if(YellowCounter >= 5)
 8000a94:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <fsm_manual_run+0x518>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	dd03      	ble.n	8000aa4 <fsm_manual_run+0x3c4>
				YellowCounter = 1;
 8000a9c:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <fsm_manual_run+0x518>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e004      	b.n	8000aae <fsm_manual_run+0x3ce>
			else
				YellowCounter++;
 8000aa4:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <fsm_manual_run+0x518>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a53      	ldr	r2, [pc, #332]	; (8000bf8 <fsm_manual_run+0x518>)
 8000aac:	6013      	str	r3, [r2, #0]
		}

		if(isButton1Pressed() == 1){};
 8000aae:	f7ff fb4d 	bl	800014c <isButton1Pressed>

		if(RedCounter > YellowCounter){
 8000ab2:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <fsm_manual_run+0x528>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <fsm_manual_run+0x518>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dd10      	ble.n	8000ae0 <fsm_manual_run+0x400>
			if(isButton3Pressed() == 1){
 8000abe:	f7ff fb69 	bl	8000194 <isButton3Pressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	f040 8128 	bne.w	8000d1a <fsm_manual_run+0x63a>
				GreenCounter = RedCounter - YellowCounter;
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <fsm_manual_run+0x528>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <fsm_manual_run+0x518>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	4a4d      	ldr	r2, [pc, #308]	; (8000c0c <fsm_manual_run+0x52c>)
 8000ad6:	6013      	str	r3, [r2, #0]
				status = MODE3;
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <fsm_manual_run+0x524>)
 8000ada:	2214      	movs	r2, #20
 8000adc:	601a      	str	r2, [r3, #0]
			}
		} else
			if(isButton3Pressed() == 1){};
		break;
 8000ade:	e11c      	b.n	8000d1a <fsm_manual_run+0x63a>
			if(isButton3Pressed() == 1){};
 8000ae0:	f7ff fb58 	bl	8000194 <isButton3Pressed>
		break;
 8000ae4:	e119      	b.n	8000d1a <fsm_manual_run+0x63a>
	case MODE4:
		clearTimer2();
 8000ae6:	f000 fced 	bl	80014c4 <clearTimer2>
		clearTimer3();
 8000aea:	f000 fd17 	bl	800151c <clearTimer3>
		clearTimer4();
 8000aee:	f000 fd41 	bl	8001574 <clearTimer4>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	483c      	ldr	r0, [pc, #240]	; (8000be8 <fsm_manual_run+0x508>)
 8000af8:	f001 f99d 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2140      	movs	r1, #64	; 0x40
 8000b00:	4839      	ldr	r0, [pc, #228]	; (8000be8 <fsm_manual_run+0x508>)
 8000b02:	f001 f998 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	4836      	ldr	r0, [pc, #216]	; (8000be8 <fsm_manual_run+0x508>)
 8000b0e:	f001 f992 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4833      	ldr	r0, [pc, #204]	; (8000be8 <fsm_manual_run+0x508>)
 8000b1a:	f001 f98c 	bl	8001e36 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <fsm_manual_run+0x50c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10c      	bne.n	8000b40 <fsm_manual_run+0x460>
			HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	482f      	ldr	r0, [pc, #188]	; (8000be8 <fsm_manual_run+0x508>)
 8000b2a:	f001 f99c 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	482d      	ldr	r0, [pc, #180]	; (8000be8 <fsm_manual_run+0x508>)
 8000b34:	f001 f997 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3c:	f000 fc8a 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <fsm_manual_run+0x510>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d126      	bne.n	8000b96 <fsm_manual_run+0x4b6>
			led_buffer[0] = 0;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <fsm_manual_run+0x514>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 4;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <fsm_manual_run+0x514>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	605a      	str	r2, [r3, #4]
			led_buffer[2] = GreenCounter/10;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <fsm_manual_run+0x52c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <fsm_manual_run+0x51c>)
 8000b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5e:	1092      	asrs	r2, r2, #2
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <fsm_manual_run+0x514>)
 8000b66:	6093      	str	r3, [r2, #8]
			led_buffer[3] = GreenCounter%10;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <fsm_manual_run+0x52c>)
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <fsm_manual_run+0x51c>)
 8000b6e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b72:	109a      	asrs	r2, r3, #2
 8000b74:	17cb      	asrs	r3, r1, #31
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	1aca      	subs	r2, r1, r3
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <fsm_manual_run+0x514>)
 8000b84:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <fsm_manual_run+0x520>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f950 	bl	8000e30 <update7SEG>
			setTimer5(125);
 8000b90:	207d      	movs	r0, #125	; 0x7d
 8000b92:	f000 fcff 	bl	8001594 <setTimer5>
//
//		clearTimer2();
//		clearTimer3();
//		clearTimer4();

		if(isButton1Pressed() == 1){
 8000b96:	f7ff fad9 	bl	800014c <isButton1Pressed>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d117      	bne.n	8000bd0 <fsm_manual_run+0x4f0>
			status = MODE1;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <fsm_manual_run+0x524>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
			clearTimer2();
 8000ba6:	f000 fc8d 	bl	80014c4 <clearTimer2>
			clearTimer3();
 8000baa:	f000 fcb7 	bl	800151c <clearTimer3>
			clearTimer4();
 8000bae:	f000 fce1 	bl	8001574 <clearTimer4>
			count1 = 0;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <fsm_manual_run+0x530>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <fsm_manual_run+0x534>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
			timer2_flag = 1;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <fsm_manual_run+0x538>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
			timer3_flag = 1;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <fsm_manual_run+0x53c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
			timer4_flag = 1;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <fsm_manual_run+0x540>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1){
 8000bd0:	f7ff face 	bl	8000170 <isButton2Pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d102      	bne.n	8000be0 <fsm_manual_run+0x500>
			status = GREEN_INCREASE;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <fsm_manual_run+0x524>)
 8000bdc:	221f      	movs	r2, #31
 8000bde:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1){};
 8000be0:	f7ff fad8 	bl	8000194 <isButton3Pressed>
		break;
 8000be4:	e09a      	b.n	8000d1c <fsm_manual_run+0x63c>
 8000be6:	bf00      	nop
 8000be8:	40010800 	.word	0x40010800
 8000bec:	200000e8 	.word	0x200000e8
 8000bf0:	20000108 	.word	0x20000108
 8000bf4:	20000048 	.word	0x20000048
 8000bf8:	20000040 	.word	0x20000040
 8000bfc:	66666667 	.word	0x66666667
 8000c00:	20000090 	.word	0x20000090
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	2000003c 	.word	0x2000003c
 8000c0c:	20000044 	.word	0x20000044
 8000c10:	20000094 	.word	0x20000094
 8000c14:	20000098 	.word	0x20000098
 8000c18:	200000f0 	.word	0x200000f0
 8000c1c:	200000f8 	.word	0x200000f8
 8000c20:	20000100 	.word	0x20000100
	case GREEN_INCREASE:
		clearTimer2();
 8000c24:	f000 fc4e 	bl	80014c4 <clearTimer2>
		clearTimer3();
 8000c28:	f000 fc78 	bl	800151c <clearTimer3>
		clearTimer4();
 8000c2c:	f000 fca2 	bl	8001574 <clearTimer4>
		if(timer1_flag == 1){
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <fsm_manual_run+0x640>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d10c      	bne.n	8000c52 <fsm_manual_run+0x572>
			HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <fsm_manual_run+0x644>)
 8000c3c:	f001 f913 	bl	8001e66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <fsm_manual_run+0x644>)
 8000c46:	f001 f90e 	bl	8001e66 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4e:	f000 fc01 	bl	8001454 <setTimer1>
		}

		if(timer5_flag == 1) {
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <fsm_manual_run+0x648>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d126      	bne.n	8000ca8 <fsm_manual_run+0x5c8>
			led_buffer[0] = 0;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <fsm_manual_run+0x64c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 4;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <fsm_manual_run+0x64c>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	605a      	str	r2, [r3, #4]
			led_buffer[2] = GreenCounter/10;
 8000c66:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <fsm_manual_run+0x650>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <fsm_manual_run+0x654>)
 8000c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c70:	1092      	asrs	r2, r2, #2
 8000c72:	17db      	asrs	r3, r3, #31
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <fsm_manual_run+0x64c>)
 8000c78:	6093      	str	r3, [r2, #8]
			led_buffer[3] = GreenCounter%10;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <fsm_manual_run+0x650>)
 8000c7c:	6819      	ldr	r1, [r3, #0]
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <fsm_manual_run+0x654>)
 8000c80:	fb83 2301 	smull	r2, r3, r3, r1
 8000c84:	109a      	asrs	r2, r3, #2
 8000c86:	17cb      	asrs	r3, r1, #31
 8000c88:	1ad2      	subs	r2, r2, r3
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	1aca      	subs	r2, r1, r3
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <fsm_manual_run+0x64c>)
 8000c96:	60da      	str	r2, [r3, #12]
			update7SEG(index_led);
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <fsm_manual_run+0x658>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f8c7 	bl	8000e30 <update7SEG>
			setTimer5(125);
 8000ca2:	207d      	movs	r0, #125	; 0x7d
 8000ca4:	f000 fc76 	bl	8001594 <setTimer5>
		}

		if(isButton2Pressed() == 1){
 8000ca8:	f7ff fa62 	bl	8000170 <isButton2Pressed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10c      	bne.n	8000ccc <fsm_manual_run+0x5ec>
			if(GreenCounter >= 99)
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <fsm_manual_run+0x650>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b62      	cmp	r3, #98	; 0x62
 8000cb8:	dd03      	ble.n	8000cc2 <fsm_manual_run+0x5e2>
				GreenCounter = 1;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <fsm_manual_run+0x650>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e004      	b.n	8000ccc <fsm_manual_run+0x5ec>
			else
				GreenCounter++;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <fsm_manual_run+0x650>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <fsm_manual_run+0x650>)
 8000cca:	6013      	str	r3, [r2, #0]
		}

		if(isButton1Pressed() == 1){};
 8000ccc:	f7ff fa3e 	bl	800014c <isButton1Pressed>

		if(GreenCounter + YellowCounter < 100 && GreenCounter > YellowCounter){
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <fsm_manual_run+0x650>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <fsm_manual_run+0x65c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	2b63      	cmp	r3, #99	; 0x63
 8000cdc:	dc15      	bgt.n	8000d0a <fsm_manual_run+0x62a>
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <fsm_manual_run+0x650>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <fsm_manual_run+0x65c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dd0f      	ble.n	8000d0a <fsm_manual_run+0x62a>
			if(isButton3Pressed() == 1){
 8000cea:	f7ff fa53 	bl	8000194 <isButton3Pressed>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d10d      	bne.n	8000d10 <fsm_manual_run+0x630>
				RedCounter = GreenCounter + YellowCounter;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <fsm_manual_run+0x650>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <fsm_manual_run+0x65c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <fsm_manual_run+0x660>)
 8000d00:	6013      	str	r3, [r2, #0]
				status = MODE4;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <fsm_manual_run+0x664>)
 8000d04:	221e      	movs	r2, #30
 8000d06:	601a      	str	r2, [r3, #0]
			if(isButton3Pressed() == 1){
 8000d08:	e002      	b.n	8000d10 <fsm_manual_run+0x630>
			}
		} else
			if(isButton3Pressed() == 1){};
 8000d0a:	f7ff fa43 	bl	8000194 <isButton3Pressed>
		break;
 8000d0e:	e005      	b.n	8000d1c <fsm_manual_run+0x63c>
 8000d10:	e004      	b.n	8000d1c <fsm_manual_run+0x63c>
	default:
		break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <fsm_manual_run+0x63c>
		break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <fsm_manual_run+0x63c>
		break;
 8000d1a:	bf00      	nop
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000e8 	.word	0x200000e8
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000108 	.word	0x20000108
 8000d2c:	20000048 	.word	0x20000048
 8000d30:	20000044 	.word	0x20000044
 8000d34:	66666667 	.word	0x66666667
 8000d38:	20000090 	.word	0x20000090
 8000d3c:	20000040 	.word	0x20000040
 8000d40:	2000003c 	.word	0x2000003c
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <display7SEG>:

int hour = 15;
int minute = 8;
int second = 50;

void display7SEG(int num) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	int dis_arr[10] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <display7SEG+0xe0>)
 8000d52:	f107 0408 	add.w	r4, r7, #8
 8000d56:	461d      	mov	r5, r3
 8000d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d64:	e884 0003 	stmia.w	r4, {r0, r1}
	int bit_var, var2;

	var2 = ~dis_arr[num];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	3338      	adds	r3, #56	; 0x38
 8000d6e:	443b      	add	r3, r7
 8000d70:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
	bit_var = var2 & 0x01;
 8000d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, bit_var);
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	2101      	movs	r1, #1
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <display7SEG+0xe4>)
 8000d8a:	f001 f854 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>1) & 0x01;
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	105b      	asrs	r3, r3, #1
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, bit_var);
 8000d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4822      	ldr	r0, [pc, #136]	; (8000e2c <display7SEG+0xe4>)
 8000da2:	f001 f848 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>2) & 0x01;
 8000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da8:	109b      	asrs	r3, r3, #2
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, bit_var);
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2104      	movs	r1, #4
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <display7SEG+0xe4>)
 8000dba:	f001 f83c 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>3) & 0x01;
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc0:	10db      	asrs	r3, r3, #3
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, bit_var);
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4816      	ldr	r0, [pc, #88]	; (8000e2c <display7SEG+0xe4>)
 8000dd2:	f001 f830 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>4) & 0x01;
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd8:	111b      	asrs	r3, r3, #4
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, bit_var);
 8000de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	2110      	movs	r1, #16
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <display7SEG+0xe4>)
 8000dea:	f001 f824 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>5) & 0x01;
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	115b      	asrs	r3, r3, #5
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, bit_var);
 8000df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2120      	movs	r1, #32
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <display7SEG+0xe4>)
 8000e02:	f001 f818 	bl	8001e36 <HAL_GPIO_WritePin>

	bit_var = (var2>>6) & 0x01;
 8000e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e08:	119b      	asrs	r3, r3, #6
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, bit_var);
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <display7SEG+0xe4>)
 8000e1a:	f001 f80c 	bl	8001e36 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	; 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08002ea0 	.word	0x08002ea0
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <update7SEG>:

void update7SEG(int index) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	switch(index) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	f200 8098 	bhi.w	8000f70 <update7SEG+0x140>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <update7SEG+0x18>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e59 	.word	0x08000e59
 8000e4c:	08000e9f 	.word	0x08000e9f
 8000e50:	08000ee5 	.word	0x08000ee5
 8000e54:	08000f2b 	.word	0x08000f2b
	case 0:
	// Display the first 7 SEG with led_buffer [0]
		display7SEG(led_buffer[index]);
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <update7SEG+0x14c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff71 	bl	8000d48 <display7SEG>
		index_led = 1;
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <update7SEG+0x150>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, en1_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e72:	4844      	ldr	r0, [pc, #272]	; (8000f84 <update7SEG+0x154>)
 8000e74:	f000 ffdf 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en2_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4841      	ldr	r0, [pc, #260]	; (8000f84 <update7SEG+0x154>)
 8000e80:	f000 ffd9 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en3_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8a:	483e      	ldr	r0, [pc, #248]	; (8000f84 <update7SEG+0x154>)
 8000e8c:	f000 ffd3 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en4_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	483b      	ldr	r0, [pc, #236]	; (8000f84 <update7SEG+0x154>)
 8000e98:	f000 ffcd 	bl	8001e36 <HAL_GPIO_WritePin>
		break ;
 8000e9c:	e069      	b.n	8000f72 <update7SEG+0x142>
	case 1:
	 // Display the second 7 SEG with led_buffer [1]
		display7SEG(led_buffer[index]);
 8000e9e:	4a37      	ldr	r2, [pc, #220]	; (8000f7c <update7SEG+0x14c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff4e 	bl	8000d48 <display7SEG>
		index_led = 2;
 8000eac:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <update7SEG+0x150>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, en1_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb8:	4832      	ldr	r0, [pc, #200]	; (8000f84 <update7SEG+0x154>)
 8000eba:	f000 ffbc 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en2_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec4:	482f      	ldr	r0, [pc, #188]	; (8000f84 <update7SEG+0x154>)
 8000ec6:	f000 ffb6 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en3_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed0:	482c      	ldr	r0, [pc, #176]	; (8000f84 <update7SEG+0x154>)
 8000ed2:	f000 ffb0 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en4_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000edc:	4829      	ldr	r0, [pc, #164]	; (8000f84 <update7SEG+0x154>)
 8000ede:	f000 ffaa 	bl	8001e36 <HAL_GPIO_WritePin>
		break ;
 8000ee2:	e046      	b.n	8000f72 <update7SEG+0x142>
	case 2:
	// Display the third 7 SEG with led_buffer [2]
		display7SEG(led_buffer[index]);
 8000ee4:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <update7SEG+0x14c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff2b 	bl	8000d48 <display7SEG>
		index_led = 3;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <update7SEG+0x150>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, en1_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <update7SEG+0x154>)
 8000f00:	f000 ff99 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en2_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <update7SEG+0x154>)
 8000f0c:	f000 ff93 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en3_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	481b      	ldr	r0, [pc, #108]	; (8000f84 <update7SEG+0x154>)
 8000f18:	f000 ff8d 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en4_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <update7SEG+0x154>)
 8000f24:	f000 ff87 	bl	8001e36 <HAL_GPIO_WritePin>
		break ;
 8000f28:	e023      	b.n	8000f72 <update7SEG+0x142>
	case 3:
	// Display the forth 7 SEG with led_buffer [3]
		display7SEG(led_buffer[index]);
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <update7SEG+0x14c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff08 	bl	8000d48 <display7SEG>
		index_led = 0;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <update7SEG+0x150>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, en1_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <update7SEG+0x154>)
 8000f46:	f000 ff76 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en2_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <update7SEG+0x154>)
 8000f52:	f000 ff70 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en3_Pin, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <update7SEG+0x154>)
 8000f5e:	f000 ff6a 	bl	8001e36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, en4_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <update7SEG+0x154>)
 8000f6a:	f000 ff64 	bl	8001e36 <HAL_GPIO_WritePin>
		break ;
 8000f6e:	e000      	b.n	8000f72 <update7SEG+0x142>
	default :
		break ;
 8000f70:	bf00      	nop
	}
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000048 	.word	0x20000048
 8000f80:	20000090 	.word	0x20000090
 8000f84:	40010800 	.word	0x40010800

08000f88 <updateClockBuffer>:

int count1 = 0;
int count2 = 0;

void updateClockBuffer() {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
//	else
//		led_buffer[2] = 0;
//	led_buffer[3] = minute%10;

	// display traffic light 1 and led 7 segments 1
	if(count1 < RedCounter) { //red 1 first
 8000f8c:	4b95      	ldr	r3, [pc, #596]	; (80011e4 <updateClockBuffer+0x25c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b95      	ldr	r3, [pc, #596]	; (80011e8 <updateClockBuffer+0x260>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	da1f      	bge.n	8000fd8 <updateClockBuffer+0x50>
		led_buffer[0] = (RedCounter-count1)/10;
 8000f98:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <updateClockBuffer+0x260>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b91      	ldr	r3, [pc, #580]	; (80011e4 <updateClockBuffer+0x25c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4a92      	ldr	r2, [pc, #584]	; (80011ec <updateClockBuffer+0x264>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	1092      	asrs	r2, r2, #2
 8000faa:	17db      	asrs	r3, r3, #31
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4a90      	ldr	r2, [pc, #576]	; (80011f0 <updateClockBuffer+0x268>)
 8000fb0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RedCounter-count1)%10;
 8000fb2:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <updateClockBuffer+0x260>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <updateClockBuffer+0x25c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	1ad1      	subs	r1, r2, r3
 8000fbc:	4b8b      	ldr	r3, [pc, #556]	; (80011ec <updateClockBuffer+0x264>)
 8000fbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000fc2:	109a      	asrs	r2, r3, #2
 8000fc4:	17cb      	asrs	r3, r1, #31
 8000fc6:	1ad2      	subs	r2, r2, r3
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	1aca      	subs	r2, r1, r3
 8000fd2:	4b87      	ldr	r3, [pc, #540]	; (80011f0 <updateClockBuffer+0x268>)
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	e059      	b.n	800108c <updateClockBuffer+0x104>
		//update7SEG(index_led);
	}
	else {
		if(count1 < (RedCounter + GreenCounter)) { //then green 1
 8000fd8:	4b83      	ldr	r3, [pc, #524]	; (80011e8 <updateClockBuffer+0x260>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <updateClockBuffer+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <updateClockBuffer+0x25c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dd25      	ble.n	8001036 <updateClockBuffer+0xae>
			led_buffer[0] = (RedCounter+GreenCounter-count1)/10;
 8000fea:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <updateClockBuffer+0x260>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <updateClockBuffer+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	441a      	add	r2, r3
 8000ff4:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <updateClockBuffer+0x25c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	4a7c      	ldr	r2, [pc, #496]	; (80011ec <updateClockBuffer+0x264>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1092      	asrs	r2, r2, #2
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <updateClockBuffer+0x268>)
 8001008:	6013      	str	r3, [r2, #0]
			led_buffer[1] = (RedCounter+GreenCounter-count1)%10;
 800100a:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <updateClockBuffer+0x260>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b79      	ldr	r3, [pc, #484]	; (80011f4 <updateClockBuffer+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	441a      	add	r2, r3
 8001014:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <updateClockBuffer+0x25c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1ad1      	subs	r1, r2, r3
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <updateClockBuffer+0x264>)
 800101c:	fb83 2301 	smull	r2, r3, r3, r1
 8001020:	109a      	asrs	r2, r3, #2
 8001022:	17cb      	asrs	r3, r1, #31
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <updateClockBuffer+0x268>)
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	e02a      	b.n	800108c <updateClockBuffer+0x104>
			//update7SEG(index_led);
		}
		else { //and finally yellow 1
			led_buffer[0] = (RedCounter+GreenCounter+YellowCounter-count1)/10;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <updateClockBuffer+0x260>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <updateClockBuffer+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	441a      	add	r2, r3
 8001040:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <updateClockBuffer+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	441a      	add	r2, r3
 8001046:	4b67      	ldr	r3, [pc, #412]	; (80011e4 <updateClockBuffer+0x25c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4a67      	ldr	r2, [pc, #412]	; (80011ec <updateClockBuffer+0x264>)
 800104e:	fb82 1203 	smull	r1, r2, r2, r3
 8001052:	1092      	asrs	r2, r2, #2
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	4a65      	ldr	r2, [pc, #404]	; (80011f0 <updateClockBuffer+0x268>)
 800105a:	6013      	str	r3, [r2, #0]
			led_buffer[1] = (RedCounter+GreenCounter+YellowCounter-count1)%10;
 800105c:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <updateClockBuffer+0x260>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <updateClockBuffer+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	441a      	add	r2, r3
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <updateClockBuffer+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	441a      	add	r2, r3
 800106c:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <updateClockBuffer+0x25c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1ad1      	subs	r1, r2, r3
 8001072:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <updateClockBuffer+0x264>)
 8001074:	fb83 2301 	smull	r2, r3, r3, r1
 8001078:	109a      	asrs	r2, r3, #2
 800107a:	17cb      	asrs	r3, r1, #31
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	1aca      	subs	r2, r1, r3
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <updateClockBuffer+0x268>)
 800108a:	605a      	str	r2, [r3, #4]
			//update7SEG(index_led);
		}
	}
	count1++;
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <updateClockBuffer+0x25c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <updateClockBuffer+0x25c>)
 8001094:	6013      	str	r3, [r2, #0]
	if(count1 >= RedCounter+GreenCounter+YellowCounter)
 8001096:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <updateClockBuffer+0x260>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <updateClockBuffer+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	441a      	add	r2, r3
 80010a0:	4b55      	ldr	r3, [pc, #340]	; (80011f8 <updateClockBuffer+0x270>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	441a      	add	r2, r3
 80010a6:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <updateClockBuffer+0x25c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dc02      	bgt.n	80010b4 <updateClockBuffer+0x12c>
		count1 = 0; //back to red 1
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <updateClockBuffer+0x25c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

	// display traffic light 2 and led 7 segments 2
	if(count2 < GreenCounter) { // green 2 first
 80010b4:	4b51      	ldr	r3, [pc, #324]	; (80011fc <updateClockBuffer+0x274>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <updateClockBuffer+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da1f      	bge.n	8001100 <updateClockBuffer+0x178>
		led_buffer[2] = (GreenCounter-count2)/10;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <updateClockBuffer+0x26c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <updateClockBuffer+0x274>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a48      	ldr	r2, [pc, #288]	; (80011ec <updateClockBuffer+0x264>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <updateClockBuffer+0x268>)
 80010d8:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GreenCounter-count2)%10;
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <updateClockBuffer+0x26c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <updateClockBuffer+0x274>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	1ad1      	subs	r1, r2, r3
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <updateClockBuffer+0x264>)
 80010e6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ea:	109a      	asrs	r2, r3, #2
 80010ec:	17cb      	asrs	r3, r1, #31
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <updateClockBuffer+0x268>)
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	e059      	b.n	80011b4 <updateClockBuffer+0x22c>
		//update7SEG(index_led);
	}
	else {
		if(count2 < (GreenCounter + YellowCounter)) { //then yellow 2
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <updateClockBuffer+0x26c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <updateClockBuffer+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	441a      	add	r2, r3
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <updateClockBuffer+0x274>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	dd25      	ble.n	800115e <updateClockBuffer+0x1d6>
			led_buffer[2] = (GreenCounter+YellowCounter-count2)/10;
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <updateClockBuffer+0x26c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <updateClockBuffer+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	441a      	add	r2, r3
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <updateClockBuffer+0x274>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <updateClockBuffer+0x264>)
 8001124:	fb82 1203 	smull	r1, r2, r2, r3
 8001128:	1092      	asrs	r2, r2, #2
 800112a:	17db      	asrs	r3, r3, #31
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <updateClockBuffer+0x268>)
 8001130:	6093      	str	r3, [r2, #8]
			led_buffer[3] = (GreenCounter+YellowCounter-count2)%10;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <updateClockBuffer+0x26c>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <updateClockBuffer+0x270>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	441a      	add	r2, r3
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <updateClockBuffer+0x274>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1ad1      	subs	r1, r2, r3
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <updateClockBuffer+0x264>)
 8001144:	fb83 2301 	smull	r2, r3, r3, r1
 8001148:	109a      	asrs	r2, r3, #2
 800114a:	17cb      	asrs	r3, r1, #31
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	1aca      	subs	r2, r1, r3
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <updateClockBuffer+0x268>)
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	e02a      	b.n	80011b4 <updateClockBuffer+0x22c>
			//update7SEG(index_led);
		}
		else { //and finally red 2
			led_buffer[2] = (RedCounter+GreenCounter+YellowCounter-count2)/10;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <updateClockBuffer+0x260>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <updateClockBuffer+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	441a      	add	r2, r3
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <updateClockBuffer+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	441a      	add	r2, r3
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <updateClockBuffer+0x274>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <updateClockBuffer+0x264>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	1092      	asrs	r2, r2, #2
 800117c:	17db      	asrs	r3, r3, #31
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <updateClockBuffer+0x268>)
 8001182:	6093      	str	r3, [r2, #8]
			led_buffer[3] = (RedCounter+GreenCounter+YellowCounter-count2)%10;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <updateClockBuffer+0x260>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <updateClockBuffer+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	441a      	add	r2, r3
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <updateClockBuffer+0x270>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	441a      	add	r2, r3
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <updateClockBuffer+0x274>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	1ad1      	subs	r1, r2, r3
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <updateClockBuffer+0x264>)
 800119c:	fb83 2301 	smull	r2, r3, r3, r1
 80011a0:	109a      	asrs	r2, r3, #2
 80011a2:	17cb      	asrs	r3, r1, #31
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1aca      	subs	r2, r1, r3
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <updateClockBuffer+0x268>)
 80011b2:	60da      	str	r2, [r3, #12]
			//update7SEG(index_led);
		}
	}
	count2++;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <updateClockBuffer+0x274>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <updateClockBuffer+0x274>)
 80011bc:	6013      	str	r3, [r2, #0]
	if(count2 >= RedCounter+GreenCounter+YellowCounter)
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <updateClockBuffer+0x260>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <updateClockBuffer+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	441a      	add	r2, r3
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <updateClockBuffer+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	441a      	add	r2, r3
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <updateClockBuffer+0x274>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dc02      	bgt.n	80011dc <updateClockBuffer+0x254>
		count2 = 0; //back to green 2
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <updateClockBuffer+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
	//setTimer1(1000);
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000094 	.word	0x20000094
 80011e8:	2000003c 	.word	0x2000003c
 80011ec:	66666667 	.word	0x66666667
 80011f0:	20000048 	.word	0x20000048
 80011f4:	20000044 	.word	0x20000044
 80011f8:	20000040 	.word	0x20000040
 80011fc:	20000098 	.word	0x20000098

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 fb14 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f826 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8ac 	bl	8001368 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001210:	f000 f85e 	bl	80012d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <main+0x50>)
 8001216:	f001 fa77 	bl	8002708 <HAL_TIM_Base_Start_IT>
  setTimer1(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f000 f919 	bl	8001454 <setTimer1>
  setTimer2(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f000 f931 	bl	800148c <setTimer2>
  setTimer3(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f000 f959 	bl	80014e4 <setTimer3>
  setTimer4(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f000 f982 	bl	800153c <setTimer4>
  setTimer5(1000);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f000 f9aa 	bl	8001594 <setTimer5>
  status = MODE1;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <main+0x54>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
	  /*if(isButton1Pressed()){
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	  }*/
	  fsm_automatic_run();
 8001246:	f7ff f8bf 	bl	80003c8 <fsm_automatic_run>
	  fsm_manual_run();
 800124a:	f7ff fa49 	bl	80006e0 <fsm_manual_run>
	  fsm_automatic_run();
 800124e:	e7fa      	b.n	8001246 <main+0x46>
 8001250:	2000009c 	.word	0x2000009c
 8001254:	2000008c 	.word	0x2000008c

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b090      	sub	sp, #64	; 0x40
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	2228      	movs	r2, #40	; 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fe06 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001282:	2310      	movs	r3, #16
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fe02 	bl	8001e98 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800129a:	f000 f8d5 	bl	8001448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 f870 	bl	800239c <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012c2:	f000 f8c1 	bl	8001448 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3740      	adds	r7, #64	; 0x40
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM2_Init+0x94>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_TIM2_Init+0x94>)
 80012f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_TIM2_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM2_Init+0x94>)
 8001304:	2209      	movs	r2, #9
 8001306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_TIM2_Init+0x94>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_TIM2_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_TIM2_Init+0x94>)
 8001316:	f001 f9a7 	bl	8002668 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001320:	f000 f892 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <MX_TIM2_Init+0x94>)
 8001332:	f001 fb3d 	bl	80029b0 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800133c:	f000 f884 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_TIM2_Init+0x94>)
 800134e:	f001 fd05 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001358:	f000 f876 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000009c 	.word	0x2000009c

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_GPIO_Init+0xb4>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <MX_GPIO_Init+0xb4>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_GPIO_Init+0xb4>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_GPIO_Init+0xb4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <MX_GPIO_Init+0xb4>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_GPIO_Init+0xb4>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 80013ac:	2200      	movs	r2, #0
 80013ae:	f647 71e0 	movw	r1, #32736	; 0x7fe0
 80013b2:	481b      	ldr	r0, [pc, #108]	; (8001420 <MX_GPIO_Init+0xb8>)
 80013b4:	f000 fd3f 	bl	8001e36 <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|en1_Pin|en2_Pin
                          |en3_Pin|en4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 80013b8:	2200      	movs	r2, #0
 80013ba:	217f      	movs	r1, #127	; 0x7f
 80013bc:	4819      	ldr	r0, [pc, #100]	; (8001424 <MX_GPIO_Init+0xbc>)
 80013be:	f000 fd3a 	bl	8001e36 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80013c2:	230e      	movs	r3, #14
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_GPIO_Init+0xb8>)
 80013d6:	f000 fb9b 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin red2_Pin
                           yellow2_Pin green2_Pin en1_Pin en2_Pin
                           en3_Pin en4_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 80013da:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80013de:	60bb      	str	r3, [r7, #8]
                          |yellow2_Pin|green2_Pin|en1_Pin|en2_Pin
                          |en3_Pin|en4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2302      	movs	r3, #2
 80013ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_GPIO_Init+0xb8>)
 80013f4:	f000 fb8c 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 80013f8:	237f      	movs	r3, #127	; 0x7f
 80013fa:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2302      	movs	r3, #2
 8001406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0xbc>)
 8001410:	f000 fb7e 	bl	8001b10 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00

08001428 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001430:	f000 f8cc 	bl	80015cc <timerRun>
	getKeyInput1();
 8001434:	f7fe fee4 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001438:	f7fe ff2e 	bl	8000298 <getKeyInput2>
	getKeyInput3();
 800143c:	f7fe ff78 	bl	8000330 <getKeyInput3>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <setTimer1>:
int timer5_flag = 0;

int timer6_counter = 0;
int timer6_flag = 0;

void setTimer1(int duration){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <setTimer1+0x2c>)
 8001460:	fb82 1203 	smull	r1, r2, r2, r3
 8001464:	1092      	asrs	r2, r2, #2
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <setTimer1+0x30>)
 800146c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <setTimer1+0x34>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	66666667 	.word	0x66666667
 8001484:	200000e4 	.word	0x200000e4
 8001488:	200000e8 	.word	0x200000e8

0800148c <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int duration){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <setTimer2+0x2c>)
 8001498:	fb82 1203 	smull	r1, r2, r2, r3
 800149c:	1092      	asrs	r2, r2, #2
 800149e:	17db      	asrs	r3, r3, #31
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	4a06      	ldr	r2, [pc, #24]	; (80014bc <setTimer2+0x30>)
 80014a4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <setTimer2+0x34>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	66666667 	.word	0x66666667
 80014bc:	200000ec 	.word	0x200000ec
 80014c0:	200000f0 	.word	0x200000f0

080014c4 <clearTimer2>:

void clearTimer2(){
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <clearTimer2+0x18>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <clearTimer2+0x1c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	200000ec 	.word	0x200000ec
 80014e0:	200000f0 	.word	0x200000f0

080014e4 <setTimer3>:

void setTimer3(int duration){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <setTimer3+0x2c>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1092      	asrs	r2, r2, #2
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <setTimer3+0x30>)
 80014fc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <setTimer3+0x34>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	66666667 	.word	0x66666667
 8001514:	200000f4 	.word	0x200000f4
 8001518:	200000f8 	.word	0x200000f8

0800151c <clearTimer3>:

void clearTimer3(){
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <clearTimer3+0x18>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <clearTimer3+0x1c>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200000f4 	.word	0x200000f4
 8001538:	200000f8 	.word	0x200000f8

0800153c <setTimer4>:

void setTimer4(int duration){
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <setTimer4+0x2c>)
 8001548:	fb82 1203 	smull	r1, r2, r2, r3
 800154c:	1092      	asrs	r2, r2, #2
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a06      	ldr	r2, [pc, #24]	; (800156c <setTimer4+0x30>)
 8001554:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <setTimer4+0x34>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	66666667 	.word	0x66666667
 800156c:	200000fc 	.word	0x200000fc
 8001570:	20000100 	.word	0x20000100

08001574 <clearTimer4>:

void clearTimer4(){
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	timer4_counter = 0;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <clearTimer4+0x18>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <clearTimer4+0x1c>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	200000fc 	.word	0x200000fc
 8001590:	20000100 	.word	0x20000100

08001594 <setTimer5>:

void setTimer5(int duration){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <setTimer5+0x2c>)
 80015a0:	fb82 1203 	smull	r1, r2, r2, r3
 80015a4:	1092      	asrs	r2, r2, #2
 80015a6:	17db      	asrs	r3, r3, #31
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <setTimer5+0x30>)
 80015ac:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <setTimer5+0x34>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	66666667 	.word	0x66666667
 80015c4:	20000104 	.word	0x20000104
 80015c8:	20000108 	.word	0x20000108

080015cc <timerRun>:
void clearTimer6(){
	timer6_counter = 0;
	timer6_flag = 0;
}

void timerRun(){
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <timerRun+0xcc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dd0b      	ble.n	80015f0 <timerRun+0x24>
		timer1_counter--;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <timerRun+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <timerRun+0xcc>)
 80015e0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0)
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <timerRun+0xcc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <timerRun+0x24>
			timer1_flag = 1;
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <timerRun+0xd0>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <timerRun+0xd4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dd0b      	ble.n	8001610 <timerRun+0x44>
		timer2_counter--;
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <timerRun+0xd4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <timerRun+0xd4>)
 8001600:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0)
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <timerRun+0xd4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <timerRun+0x44>
			timer2_flag = 1;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <timerRun+0xd8>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0){
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <timerRun+0xdc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd0b      	ble.n	8001630 <timerRun+0x64>
		timer3_counter--;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <timerRun+0xdc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <timerRun+0xdc>)
 8001620:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0)
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <timerRun+0xdc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <timerRun+0x64>
			timer3_flag = 1;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <timerRun+0xe0>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <timerRun+0xe4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <timerRun+0x84>
		timer4_counter--;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <timerRun+0xe4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <timerRun+0xe4>)
 8001640:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <timerRun+0xe4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <timerRun+0x84>
			timer4_flag = 1;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <timerRun+0xe8>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <timerRun+0xec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0b      	ble.n	8001670 <timerRun+0xa4>
		timer5_counter--;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <timerRun+0xec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <timerRun+0xec>)
 8001660:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <timerRun+0xec>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <timerRun+0xa4>
			timer5_flag = 1;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <timerRun+0xf0>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <timerRun+0xf4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd0b      	ble.n	8001690 <timerRun+0xc4>
		timer6_counter--;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <timerRun+0xf4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <timerRun+0xf4>)
 8001680:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0)
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <timerRun+0xf4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <timerRun+0xc4>
			timer6_flag = 1;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <timerRun+0xf8>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
	}
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200000e4 	.word	0x200000e4
 800169c:	200000e8 	.word	0x200000e8
 80016a0:	200000ec 	.word	0x200000ec
 80016a4:	200000f0 	.word	0x200000f0
 80016a8:	200000f4 	.word	0x200000f4
 80016ac:	200000f8 	.word	0x200000f8
 80016b0:	200000fc 	.word	0x200000fc
 80016b4:	20000100 	.word	0x20000100
 80016b8:	20000104 	.word	0x20000104
 80016bc:	20000108 	.word	0x20000108
 80016c0:	2000010c 	.word	0x2000010c
 80016c4:	20000110 	.word	0x20000110

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_MspInit+0x5c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x5c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_MspInit+0x60>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_MspInit+0x60>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d113      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 f9a1 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 f9ba 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f87f 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f000 ffe9 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000009c 	.word	0x2000009c

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff ffe5 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f001 fb0f 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff fcf5 	bl	8001200 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001820:	08002ef0 	.word	0x08002ef0
  ldr r2, =_sbss
 8001824:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001828:	20000118 	.word	0x20000118

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f923 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff ff3c 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f93b 	bl	8001af6 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f903 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000058 	.word	0x20000058
 80018b4:	20000060 	.word	0x20000060
 80018b8:	2000005c 	.word	0x2000005c

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000060 	.word	0x20000060
 80018dc:	20000114 	.word	0x20000114

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000114 	.word	0x20000114

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <__NVIC_EnableIRQ+0x34>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff90 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff2d 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff42 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff90 	bl	80019e4 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5f 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff35 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b08b      	sub	sp, #44	; 0x2c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e161      	b.n	8001de8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b24:	2201      	movs	r2, #1
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8150 	bne.w	8001de2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a97      	ldr	r2, [pc, #604]	; (8001da4 <HAL_GPIO_Init+0x294>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d05e      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b4c:	4a95      	ldr	r2, [pc, #596]	; (8001da4 <HAL_GPIO_Init+0x294>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d875      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b52:	4a95      	ldr	r2, [pc, #596]	; (8001da8 <HAL_GPIO_Init+0x298>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d058      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b58:	4a93      	ldr	r2, [pc, #588]	; (8001da8 <HAL_GPIO_Init+0x298>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d86f      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b5e:	4a93      	ldr	r2, [pc, #588]	; (8001dac <HAL_GPIO_Init+0x29c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d052      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b64:	4a91      	ldr	r2, [pc, #580]	; (8001dac <HAL_GPIO_Init+0x29c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d869      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b6a:	4a91      	ldr	r2, [pc, #580]	; (8001db0 <HAL_GPIO_Init+0x2a0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d04c      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b70:	4a8f      	ldr	r2, [pc, #572]	; (8001db0 <HAL_GPIO_Init+0x2a0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d863      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b76:	4a8f      	ldr	r2, [pc, #572]	; (8001db4 <HAL_GPIO_Init+0x2a4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d046      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
 8001b7c:	4a8d      	ldr	r2, [pc, #564]	; (8001db4 <HAL_GPIO_Init+0x2a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d85d      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d82a      	bhi.n	8001bdc <HAL_GPIO_Init+0xcc>
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d859      	bhi.n	8001c3e <HAL_GPIO_Init+0x12e>
 8001b8a:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <HAL_GPIO_Init+0x80>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001c0b 	.word	0x08001c0b
 8001b94:	08001be5 	.word	0x08001be5
 8001b98:	08001bf7 	.word	0x08001bf7
 8001b9c:	08001c39 	.word	0x08001c39
 8001ba0:	08001c3f 	.word	0x08001c3f
 8001ba4:	08001c3f 	.word	0x08001c3f
 8001ba8:	08001c3f 	.word	0x08001c3f
 8001bac:	08001c3f 	.word	0x08001c3f
 8001bb0:	08001c3f 	.word	0x08001c3f
 8001bb4:	08001c3f 	.word	0x08001c3f
 8001bb8:	08001c3f 	.word	0x08001c3f
 8001bbc:	08001c3f 	.word	0x08001c3f
 8001bc0:	08001c3f 	.word	0x08001c3f
 8001bc4:	08001c3f 	.word	0x08001c3f
 8001bc8:	08001c3f 	.word	0x08001c3f
 8001bcc:	08001c3f 	.word	0x08001c3f
 8001bd0:	08001c3f 	.word	0x08001c3f
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001c01 	.word	0x08001c01
 8001bdc:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <HAL_GPIO_Init+0x2a8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001be2:	e02c      	b.n	8001c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e029      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e024      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e01f      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	330c      	adds	r3, #12
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e01a      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c12:	2304      	movs	r3, #4
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e013      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	611a      	str	r2, [r3, #16]
          break;
 8001c2a:	e009      	b.n	8001c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	615a      	str	r2, [r3, #20]
          break;
 8001c36:	e003      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x130>
          break;
 8001c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d801      	bhi.n	8001c4a <HAL_GPIO_Init+0x13a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_Init+0x13e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d802      	bhi.n	8001c5c <HAL_GPIO_Init+0x14c>
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x152>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	3b08      	subs	r3, #8
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	210f      	movs	r1, #15
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	401a      	ands	r2, r3
 8001c74:	6a39      	ldr	r1, [r7, #32]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80a9 	beq.w	8001de2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x2ac>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <HAL_GPIO_Init+0x2ac>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_GPIO_Init+0x2ac>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_GPIO_Init+0x2b0>)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3d      	ldr	r2, [pc, #244]	; (8001dc4 <HAL_GPIO_Init+0x2b4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <HAL_GPIO_Init+0x2b8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x1dc>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_GPIO_Init+0x2bc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_GPIO_Init+0x1d8>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e004      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_GPIO_Init+0x1e2>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d02:	492f      	ldr	r1, [pc, #188]	; (8001dc0 <HAL_GPIO_Init+0x2b0>)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	492b      	ldr	r1, [pc, #172]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4921      	ldr	r1, [pc, #132]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	491d      	ldr	r1, [pc, #116]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4917      	ldr	r1, [pc, #92]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4913      	ldr	r1, [pc, #76]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01f      	beq.n	8001dd4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e01f      	b.n	8001de2 <HAL_GPIO_Init+0x2d2>
 8001da2:	bf00      	nop
 8001da4:	10320000 	.word	0x10320000
 8001da8:	10310000 	.word	0x10310000
 8001dac:	10220000 	.word	0x10220000
 8001db0:	10210000 	.word	0x10210000
 8001db4:	10120000 	.word	0x10120000
 8001db8:	10110000 	.word	0x10110000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	40011000 	.word	0x40011000
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_GPIO_Init+0x2f4>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <HAL_GPIO_Init+0x2f4>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae96 	bne.w	8001b24 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]
 8001e42:	4613      	mov	r3, r2
 8001e44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e46:	787b      	ldrb	r3, [r7, #1]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e78:	887a      	ldrh	r2, [r7, #2]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	887b      	ldrh	r3, [r7, #2]
 8001e86:	400b      	ands	r3, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e272      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8087 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb8:	4b92      	ldr	r3, [pc, #584]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d00c      	beq.n	8001ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec4:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d112      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d10b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d168      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e24c      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x76>
 8001f00:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e02e      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a77      	ldr	r2, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xbc>
 8001f3a:	4b72      	ldr	r3, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a71      	ldr	r2, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b6f      	ldr	r3, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a67      	ldr	r2, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fcb4 	bl	80018e0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fcb0 	bl	80018e0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e200      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe4>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fca0 	bl	80018e0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fc9c 	bl	80018e0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1ec      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x10c>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d063      	beq.n	800209a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d11c      	bne.n	8002024 <HAL_RCC_OscConfig+0x18c>
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x176>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e1c0      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4939      	ldr	r1, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	e03a      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff fc55 	bl	80018e0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff fc51 	bl	80018e0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1a1      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4927      	ldr	r1, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fc34 	bl	80018e0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207c:	f7ff fc30 	bl	80018e0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e180      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03a      	beq.n	800211c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d019      	beq.n	80020e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7ff fc14 	bl	80018e0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff fc10 	bl	80018e0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e160      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 faa6 	bl	800262c <RCC_Delay>
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7ff fbfa 	bl	80018e0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ee:	e00f      	b.n	8002110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7ff fbf6 	bl	80018e0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d908      	bls.n	8002110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e146      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	42420000 	.word	0x42420000
 800210c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e9      	bne.n	80020f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a6 	beq.w	8002276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7e      	ldr	r2, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7ff fbb7 	bl	80018e0 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7ff fbb3 	bl	80018e0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	; 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e103      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x312>
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e02d      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a66      	ldr	r2, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	e01c      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x356>
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a60      	ldr	r2, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e00b      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff fb67 	bl	80018e0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff fb63 	bl	80018e0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0b1      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ee      	beq.n	8002216 <HAL_RCC_OscConfig+0x37e>
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff fb51 	bl	80018e0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff fb4d 	bl	80018e0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e09b      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8087 	beq.w	800238e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d061      	beq.n	8002350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d146      	bne.n	8002322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff fb21 	bl	80018e0 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff fb1d 	bl	80018e0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e06d      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d108      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a19      	ldr	r1, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	430b      	orrs	r3, r1
 80022ee:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff faf1 	bl	80018e0 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff faed 	bl	80018e0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e03d      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x46a>
 8002320:	e035      	b.n	800238e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fada 	bl	80018e0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff fad6 	bl	80018e0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e026      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x498>
 800234e:	e01e      	b.n	800238e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e019      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x500>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d0      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800241a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e073      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7ff fa28 	bl	80018e0 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7ff fa24 	bl	80018e0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e053      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f821 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f986 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
 8002564:	08002ed8 	.word	0x08002ed8
 8002568:	20000058 	.word	0x20000058
 800256c:	2000005c 	.word	0x2000005c

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b490      	push	{r4, r7}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_GetSysClockFreq+0xac>)
 8002578:	1d3c      	adds	r4, r7, #4
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002580:	f240 2301 	movw	r3, #513	; 0x201
 8002584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ae:	e02b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	e02b      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	0c9b      	lsrs	r3, r3, #18
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3328      	adds	r3, #40	; 0x28
 80025c0:	443b      	add	r3, r7
 80025c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0c5b      	lsrs	r3, r3, #17
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	3328      	adds	r3, #40	; 0x28
 80025de:	443b      	add	r3, r7
 80025e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	623b      	str	r3, [r7, #32]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 800260a:	623b      	str	r3, [r7, #32]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	6a3b      	ldr	r3, [r7, #32]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc90      	pop	{r4, r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	08002ec8 	.word	0x08002ec8
 8002620:	40021000 	.word	0x40021000
 8002624:	007a1200 	.word	0x007a1200
 8002628:	003d0900 	.word	0x003d0900

0800262c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <RCC_Delay+0x34>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <RCC_Delay+0x38>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0a5b      	lsrs	r3, r3, #9
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002648:	bf00      	nop
  }
  while (Delay --);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f9      	bne.n	8002648 <RCC_Delay+0x1c>
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000058 	.word	0x20000058
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff f84c 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 fa6a 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e035      	b.n	800278c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <HAL_TIM_Base_Start_IT+0x90>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x4e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d004      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x4e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_TIM_Base_Start_IT+0x94>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d010      	beq.n	800278a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002778:	e007      	b.n	800278a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40000400 	.word	0x40000400

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0202 	mvn.w	r2, #2
 80027cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9b1 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9a4 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f9b3 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f987 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f97a 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f989 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0208 	mvn.w	r2, #8
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f95d 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f950 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f95f 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0210 	mvn.w	r2, #16
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2208      	movs	r2, #8
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f933 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f926 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f935 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fd82 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa67 	bl	8002e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d10e      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8f9 	bl	8002b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b20      	cmp	r3, #32
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b20      	cmp	r3, #32
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0220 	mvn.w	r2, #32
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa32 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_ConfigClockSource+0x18>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e0b3      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x180>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a00:	d03e      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0xd0>
 8002a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a06:	f200 8087 	bhi.w	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0e:	f000 8085 	beq.w	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a16:	d87f      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a18:	2b70      	cmp	r3, #112	; 0x70
 8002a1a:	d01a      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0xa2>
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d87b      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a20:	2b60      	cmp	r3, #96	; 0x60
 8002a22:	d050      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x116>
 8002a24:	2b60      	cmp	r3, #96	; 0x60
 8002a26:	d877      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a28:	2b50      	cmp	r3, #80	; 0x50
 8002a2a:	d03c      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xf6>
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d873      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d058      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x136>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d86f      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a38:	2b30      	cmp	r3, #48	; 0x30
 8002a3a:	d064      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x156>
 8002a3c:	2b30      	cmp	r3, #48	; 0x30
 8002a3e:	d86b      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d060      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x156>
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d867      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05c      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x156>
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d05a      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a50:	e062      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f000 f95c 	bl	8002d1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
      break;
 8002a7e:	e04e      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6899      	ldr	r1, [r3, #8]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f000 f945 	bl	8002d1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa2:	609a      	str	r2, [r3, #8]
      break;
 8002aa4:	e03b      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 f8bc 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2150      	movs	r1, #80	; 0x50
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f913 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e02b      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f000 f8da 	bl	8002c8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2160      	movs	r1, #96	; 0x60
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f903 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002ae4:	e01b      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f000 f89c 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2140      	movs	r1, #64	; 0x40
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f8f3 	bl	8002cea <TIM_ITRx_SetConfig>
      break;
 8002b04:	e00b      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f000 f8ea 	bl	8002cea <TIM_ITRx_SetConfig>
        break;
 8002b16:	e002      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b18:	bf00      	nop
 8002b1a:	e000      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a25      	ldr	r2, [pc, #148]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x28>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x28>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_Base_SetConfig+0xac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0x52>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x52>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <TIM_Base_SetConfig+0xac>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <TIM_Base_SetConfig+0xa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400

08002c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 030a 	bic.w	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f023 0210 	bic.w	r2, r3, #16
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f043 0307 	orr.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	021a      	lsls	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e041      	b.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10c      	bne.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	2600      	movs	r6, #0
 8002e34:	4d0c      	ldr	r5, [pc, #48]	; (8002e68 <__libc_init_array+0x38>)
 8002e36:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e38:	1b64      	subs	r4, r4, r5
 8002e3a:	10a4      	asrs	r4, r4, #2
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	f000 f822 	bl	8002e88 <_init>
 8002e44:	2600      	movs	r6, #0
 8002e46:	4d0a      	ldr	r5, [pc, #40]	; (8002e70 <__libc_init_array+0x40>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x44>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002ee8 	.word	0x08002ee8
 8002e6c:	08002ee8 	.word	0x08002ee8
 8002e70:	08002ee8 	.word	0x08002ee8
 8002e74:	08002eec 	.word	0x08002eec

08002e78 <memset>:
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4402      	add	r2, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
